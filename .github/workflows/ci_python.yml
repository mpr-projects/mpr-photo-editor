name: Build Python Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      PIP_CACHE_DIR: .pip_cache
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set custom pip cache dir
        run: mkdir -p ${{ env.PIP_CACHE_DIR }}
        shell: bash

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          cache: 'true'

      - name: Install system build dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake libraw-dev pkg-config

      - name: Install system build dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake libraw pkg-config

      - name: Install system build dependencies (Windows)
        if: runner.os == 'Windows'
        uses: johnwason/vcpkg-action@v7
        with:
          pkgs: libraw pkgconf
          triplet: x64-windows-release
          token: ${{ github.token }}

      - name: Install python build dependencies and build wheel (Linux, macOS)
        if: runner.os != 'Windows'
        # adding --no-deps because otherwise pyside6 (and other dependencies) would be placed in
        # dist, the repair step would then try to repair pyside6, which would raise an error
        run: pip wheel . --cache-dir ${{ env.PIP_CACHE_DIR }} --wheel-dir dist --no-deps

      - name: Install python build dependencies and build wheel (Windows)
        if: runner.os == 'Windows'
        run: |
          # copy dlls into python folder so dynamic dependencies are contained in the package
          $libDir = "mpr_photo_editor/lib"
          New-Item -ItemType Directory -Force -Path $libDir | Out-Null
          Copy-Item -Path "${{ github.workspace }}/vcpkg/installed/x64-windows-release/bin/*.dll" -Destination $libDir

          # create the package
          pip -v wheel . --cache-dir ${{ env.PIP_CACHE_DIR }} --wheel-dir dist --no-deps
        env:  # we need to tell cmake where to find pkg-config (scikit-build-core has to pass the variables on to cmake)
          SKBUILD_CMAKE_ARGS: "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake;-DVCPKG_TARGET_TRIPLET=x64-windows-release;-DVCPKG_MANIFEST_MODE=OFF"
        shell: pwsh

      - name: Repair wheel (Linux)
        # this step copies all dynamically linked libraries into the wheel
        if: runner.os == 'Linux'
        run: |
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} auditwheel
          auditwheel repair dist/*.whl --wheel-dir repaired_wheels
          rm dist/*.whl
          mv repaired_wheels/*.whl dist/

      - name: Repair wheel (macOS)
        if: runner.os == 'macOS'
        run: |
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} delocate
          delocate-wheel -w dist dist/*.whl

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.os }}
          path: dist/*.whl

      - name: Install from repaired wheel (Linux, macOS)
        if: runner.os != 'Windows'
        # doing this in two steps to avoid issues with shell expansions
        run: |
          WHEEL_FILE=$(ls dist/*.whl)
          pip install "$WHEEL_FILE[dev]"

      - name: Install from repaired wheel (Windows)
        if: runner.os == 'Windows'
        run: |
          $WHEEL_FILE = (Get-ChildItem -Path "dist\*.whl").FullName
          pip install "$WHEEL_FILE`[dev]"
        shell: pwsh

      - name: Run mypy (type checks)
        run: mypy mpr_photo_editor tests/python

      - name: Run ruff (lint checks)
        run: ruff check mpr_photo_editor tests/python

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          Rename-Item -Path mpr_photo_editor -NewName mpr_photo_editor_temp
          try {
              pytest tests/python
          }
          finally {
              Rename-Item -Path mpr_photo_editor_temp -NewName mpr_photo_editor
          }
        shell: pwsh

      - name: Run tests (Unix-like)
        if: runner.os != 'Windows'
        run: |
          mv mpr_photo_editor mpr_photo_editor_temp
          pytest tests/python || exit_code=$?
          mv mpr_photo_editor_temp mpr_photo_editor
          exit ${exit_code:-0}
