name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      PIP_CACHE_DIR: .pip_cache
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set custom pip cache dir
        run: mkdir -p ${{ env.PIP_CACHE_DIR }}
        shell: bash

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            build/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install build dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y build-essential autoconf automake libtool

      - name: Build and install (Linux)
        if: runner.os == 'Linux'
        run: |
          # Ensure the output directory is clean to prevent auditwheel from
          # processing already-repaired wheels from a previous run.
          rm -rf dist repaired_wheels
          mkdir repaired_wheels
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} .[dev]
          maturin build --release --out dist
          auditwheel repair dist/*.whl --wheel-dir repaired_wheels
          rm dist/*.whl
          mv repaired_wheels/*.whl dist/
          pip install --force-reinstall dist/*.whl

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install autoconf automake libtool llvm

      - name: Build and install (macOS)
        if: runner.os == 'macOS'
        run: |
          # 1. Install Python dependencies. Because of pyproject.toml, this also installs delocate.
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} .[dev]
          # 2. Build the wheel. The rpath set in build.rs helps delocate find the dylib.
          maturin build --release --out dist
          # 3. Repair the wheel with delocate, bundling the libraw dylib.
          delocate-wheel -w dist dist/*.whl
          # 4. Install the repaired, self-contained wheel.
          pip install --force-reinstall dist/*.whl

      - name: Install vcpkg dependencies (Windows)
        if: runner.os == 'Windows'
        uses: johnwason/vcpkg-action@v7
        with:
          pkgs: libraw pkgconf
          triplet: x64-windows-release
          token: ${{ github.token }}

      - name: Install dependencies and build (Windows)
        if: runner.os == 'Windows'
        run: |
          # 1. Set environment variables for the current step (used in the pip-environment)
          $env:VCPKG_ROOT = "${{ github.workspace }}\vcpkg"
          $env:PKG_CONFIG_PATH = "$env:VCPKG_ROOT/installed/x64-windows-release/lib/pkgconfig"
          $env:PKG_CONFIG = "$env:VCPKG_ROOT/installed/x64-windows-release/tools/pkgconf/pkgconf.exe"
          $env:PATH = "$env:VCPKG_ROOT/installed/x64-windows-release/bin;$env:VCPKG_ROOT/installed/x64-windows-release/tools/pkgconf;" + $env:PATH

          # 2. Install Python dependencies (including maturin), this also builds our rust backend
          pip install --cache-dir ${{ env.PIP_CACHE_DIR }} .[dev]

          # 3. Manually copy the required DLLs into the package source directory.
          # Maturin will then bundle these DLLs into the wheel alongside the .pyd file.
          # We place them in a 'lib' subdirectory for better organization.
          $libDir = "mpr_photo_editor/lib"
          New-Item -ItemType Directory -Force -Path $libDir | Out-Null
          Copy-Item -Path "$env:VCPKG_ROOT/installed/x64-windows-release/bin/*.dll" -Destination $libDir

          # 4. Build the wheel
          maturin build --release --out dist

          # 5. Install the wheel we just built, overwriting the one installed by the previous step.
          # PowerShell doesn't expand wildcards for external commands, so we
          # find the wheel file first and then pass its full path to pip.
          $wheel = Get-ChildItem -Path "dist\*.whl"
          pip install --force-reinstall $wheel.FullName
        shell: pwsh


      - name: Run mypy (type checks)
        run: mypy mpr_photo_editor tests

      - name: Run ruff (lint checks)
        run: ruff check mpr_photo_editor tests

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          Rename-Item -Path mpr_photo_editor -NewName mpr_photo_editor_temp
          try {
              pytest
          }
          finally {
              Rename-Item -Path mpr_photo_editor_temp -NewName mpr_photo_editor
          }
        shell: pwsh

      - name: Run tests (Unix-like)
        if: runner.os != 'Windows'
        run: |
          mv mpr_photo_editor mpr_photo_editor_temp
          pytest || exit_code=$?
          mv mpr_photo_editor_temp mpr_photo_editor
          exit ${exit_code:-0}

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ runner.os }}
          path: dist/*.whl
