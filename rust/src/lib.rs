#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

use std::ffi::CStr;
use pyo3::prelude::*;
use ndarray::Array2;

// Include the bindings generated by `build.rs`.
include!(concat!(env!("OUT_DIR"), "/bindings.rs"));

/// Simple function to invert grayscale image pixels
#[pyfunction]
fn invert_image(image: Vec<u8>, width: usize, height: usize) -> Vec<u8> {
    let mut arr = Array2::from_shape_vec((height, width), image).unwrap();
    arr.par_mapv_inplace(|v| 255 - v);
    arr.into_raw_vec()
}

/// Returns the version string from the linked LibRaw library.
#[pyfunction]
fn get_libraw_version() -> PyResult<String> {
    // C functions are `unsafe` to call from Rust.
    let version_cstr = unsafe { CStr::from_ptr(libraw_version()) };
    Ok(version_cstr.to_string_lossy().into_owned())
}

/// Python module definition
#[pymodule]
fn rust_backend(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(invert_image, m)?)?;
    m.add_function(wrap_pyfunction!(get_libraw_version, m)?)?;
    Ok(())
}