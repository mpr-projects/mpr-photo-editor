use pyo3::prelude::*;
use pyo3::types::PyBytes;
use std::ffi::CStr;
use std::collections::HashMap;

mod image_manager;

#[allow(non_upper_case_globals, non_camel_case_types, non_snake_case, dead_code)]
mod bindings { // This module is generated by `build.rs`
    include!(concat!(env!("OUT_DIR"), "/bindings.rs"));
}

#[pymodule]
fn rust_backend(_py: Python, m: &PyModule) -> PyResult<()> {
    m.add_function(wrap_pyfunction!(load_raw_image, m)?)?;
    m.add_function(wrap_pyfunction!(get_libraw_version, m)?)?;
    m.add_function(wrap_pyfunction!(release_raw_image, m)?)?;
    m.add_function(wrap_pyfunction!(get_thumbnail, m)?)?;
    m.add_function(wrap_pyfunction!(get_metadata, m)?)?;
    Ok(())
}

#[pyfunction]
fn load_raw_image(filepath: &str) -> PyResult<u64> {
    image_manager::load_raw(filepath).map_err(|e| PyErr::new::<pyo3::exceptions::PyIOError, _>(e))
}

#[pyfunction]
fn release_raw_image(id: u64) -> PyResult<()> {
    image_manager::release_raw(id);
    Ok(())
}

#[pyfunction]
fn get_thumbnail(py: Python, id: u64) -> PyResult<PyObject> {
    let thumb_data = image_manager::get_thumbnail(id).map_err(|e| PyErr::new::<pyo3::exceptions::PyValueError, _>(e))?;
    Ok(PyBytes::new(py, &thumb_data).into())
}

#[pyfunction]
fn get_metadata(id: u64) -> PyResult<HashMap<String, String>> {
    image_manager::get_metadata(id).map_err(|e| PyErr::new::<pyo3::exceptions::PyValueError, _>(e))
}

#[pyfunction]
fn get_libraw_version() -> PyResult<String> {
    let version_str = unsafe { CStr::from_ptr(bindings::libraw_wrapper_version()) };
    Ok(version_str.to_string_lossy().into_owned())
}
